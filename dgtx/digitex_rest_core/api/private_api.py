"""
    Digitex Rest Trading API

    <br> <h4>Digitex's REST trading api specification</h4>  In order to start, one has to register either at https://testnet.digitexfutures.com for testnet (virtual funds trading) or at https://digitex.io - our mainnet (real money trading).  After registration you need to obtain your trading token in your account.  Direct links to the account page: - testnet - https://testnet.digitexfutures.com/profile/account - mainet - https://digitex.io/trade/profile/account  If you have already created your token, you can simply copy it, else click on \"Create\" in the API section of your account.   IMPORTANT NOTES!  - All of the data which is expected to be float or decimal are passed as strings. Data is converted into Decimal/float format on the client level - All timestamps are in nanoseconds UTC - Enums, such as order types, status etc can be found in Exchange-Meta-Data group of endpoints  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: spavlyuk@digitex.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from dgtx.digitex_rest_core.api_client import ApiClient, Endpoint as _Endpoint
from dgtx.digitex_rest_core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from dgtx.digitex_rest_core.model.bad_request_type import BadRequestType
from dgtx.digitex_rest_core.model.balance import Balance
from dgtx.digitex_rest_core.model.cancel_order import CancelOrder
from dgtx.digitex_rest_core.model.order_status_info import OrderStatusInfo
from dgtx.digitex_rest_core.model.paged_history_trades import PagedHistoryTrades
from dgtx.digitex_rest_core.model.paged_orders_response import PagedOrdersResponse
from dgtx.digitex_rest_core.model.place_order import PlaceOrder
from dgtx.digitex_rest_core.model.position_item import PositionItem
from dgtx.digitex_rest_core.model.update_order import UpdateOrder


class PrivateApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __v1_exchange_bot_balances_get(
            self,
            **kwargs
        ):
            """Balances  # noqa: E501

            Getting balances  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_balances_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Balance]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_balances_get = _Endpoint(
            settings={
                'response_type': ([Balance],),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/balances/',
                'operation_id': 'v1_exchange_bot_balances_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_balances_get
        )

        def __v1_exchange_bot_order_history_get(
            self,
            **kwargs
        ):
            """Order history  # noqa: E501

            Includes orders that are no longer active. These are orders that have the following status: - FILLED - numerical status 5. Order has been fully filled - CANCELLED - numerical status 4. Order has been cancelled by user. Note partially filled order can be cancelled as well - REJECTED - numerical status 3. Order has been rejected by matching engine.  All query parameters are optional.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_order_history_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                created_at_from (int): Timestamp in nanoseconds. Filters for order created at or after this timestamp. [optional]
                created_at_to (str): Timestamp in nanoseconds. Filters for orders created before this timestamp. [optional]
                cursor (str): cursor for fetching pages. [optional]
                market_id (int): Id of a market. [optional]
                page_size (int): Amount of order displayed per page. [optional]
                status (int): orders status. [optional]
                trader_id (float): Id of a users trader. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedOrdersResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_order_history_get = _Endpoint(
            settings={
                'response_type': (PagedOrdersResponse,),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/order_history/',
                'operation_id': 'v1_exchange_bot_order_history_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'created_at_from',
                    'created_at_to',
                    'cursor',
                    'market_id',
                    'page_size',
                    'status',
                    'trader_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'created_at_from':
                        (int,),
                    'created_at_to':
                        (str,),
                    'cursor':
                        (str,),
                    'market_id':
                        (int,),
                    'page_size':
                        (int,),
                    'status':
                        (int,),
                    'trader_id':
                        (float,),
                },
                'attribute_map': {
                    'created_at_from': 'created_at_from',
                    'created_at_to': 'created_at_to',
                    'cursor': 'cursor',
                    'market_id': 'market_id',
                    'page_size': 'page_size',
                    'status': 'status',
                    'trader_id': 'trader_id',
                },
                'location_map': {
                    'created_at_from': 'query',
                    'created_at_to': 'query',
                    'cursor': 'query',
                    'market_id': 'query',
                    'page_size': 'query',
                    'status': 'query',
                    'trader_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_order_history_get
        )

        def __v1_exchange_bot_order_status_get(
            self,
            client_id,
            **kwargs
        ):
            """Order status  # noqa: E501

            Get status of orders by query params  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_order_status_get(client_id, async_req=True)
            >>> result = thread.get()

            Args:
                client_id (str): uuid of the order

            Keyword Args:
                trader_id (int): optional trader's id. Works in case user has several trading accounts. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [OrderStatusInfo]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_id'] = \
                client_id
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_order_status_get = _Endpoint(
            settings={
                'response_type': ([OrderStatusInfo],),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/order_status/',
                'operation_id': 'v1_exchange_bot_order_status_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'trader_id',
                ],
                'required': [
                    'client_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (str,),
                    'trader_id':
                        (int,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'trader_id': 'trader_id',
                },
                'location_map': {
                    'client_id': 'query',
                    'trader_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_order_status_get
        )

        def __v1_exchange_bot_orders_get(
            self,
            **kwargs
        ):
            """All orders  # noqa: E501

            Open orders are orders that have not been fully filled yet.  These are order with order_status: - PENDING - numerical status 1 - the order has been recieved, however not yet accepted by the exchange matching engine - ACCEPTED - numerical status 2 - the order has been recieved, validated and accepted by the exchange matching engine - PARTIAL - numerical status 6 - ACCEPTED + partially filled. Partial filled information and remaining volume are part of the open order information   Orders can be filtered with any of the query parameters. No query parameters means all open orders.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_orders_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                status (int): - ACCEPTED (2) - order has been accepted for execution by matching engine - PENDING (1) - order has been recieved, however not yet accepted - PARTIAL (6) - order has been only partially filled . [optional]
                cursor (str): Cursor for fetching. Pagination. [optional]
                market_id (int): id of a market. [optional]
                page_size (int): Size of a paginator page. [optional]
                side (int): Filter by order side. [optional]
                trader_id (int): Id of a trader. [optional]
                type (int):  MARKET = 1  LIMIT = 2. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedOrdersResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_orders_get = _Endpoint(
            settings={
                'response_type': (PagedOrdersResponse,),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/orders/',
                'operation_id': 'v1_exchange_bot_orders_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'status',
                    'cursor',
                    'market_id',
                    'page_size',
                    'side',
                    'trader_id',
                    'type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'status':
                        (int,),
                    'cursor':
                        (str,),
                    'market_id':
                        (int,),
                    'page_size':
                        (int,),
                    'side':
                        (int,),
                    'trader_id':
                        (int,),
                    'type':
                        (int,),
                },
                'attribute_map': {
                    'status': 'status',
                    'cursor': 'cursor',
                    'market_id': 'market_id',
                    'page_size': 'page_size',
                    'side': 'side',
                    'trader_id': 'trader_id',
                    'type': 'type',
                },
                'location_map': {
                    'status': 'query',
                    'cursor': 'query',
                    'market_id': 'query',
                    'page_size': 'query',
                    'side': 'query',
                    'trader_id': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_orders_get
        )

        def __v1_exchange_bot_position_get(
            self,
            **kwargs
        ):
            """Trader position  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_position_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [PositionItem]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_position_get = _Endpoint(
            settings={
                'response_type': ([PositionItem],),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/position/',
                'operation_id': 'v1_exchange_bot_position_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_position_get
        )

        def __v1_exchange_bot_trade_history_get(
            self,
            **kwargs
        ):
            """Trade history  # noqa: E501

            Get trade history of a trader  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_trade_history_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                traded_at_from (int): Timestamp in nanoseconds. [optional]
                traded_at_to (int): Timestamp in nanoseconds. Only return contracts traded before this time.. [optional]
                cursor (str): Cursor for fetching pages in pagination. [optional]
                market_id (int): Id of a market. [optional]
                page_size (int): size of a paginator page. [optional]
                trader_id (int): optional trader id. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedHistoryTrades
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_trade_history_get = _Endpoint(
            settings={
                'response_type': (PagedHistoryTrades,),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/trade_history/',
                'operation_id': 'v1_exchange_bot_trade_history_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'traded_at_from',
                    'traded_at_to',
                    'cursor',
                    'market_id',
                    'page_size',
                    'trader_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'traded_at_from':
                        (int,),
                    'traded_at_to':
                        (int,),
                    'cursor':
                        (str,),
                    'market_id':
                        (int,),
                    'page_size':
                        (int,),
                    'trader_id':
                        (int,),
                },
                'attribute_map': {
                    'traded_at_from': 'traded_at_from',
                    'traded_at_to': 'traded_at_to',
                    'cursor': 'cursor',
                    'market_id': 'market_id',
                    'page_size': 'page_size',
                    'trader_id': 'trader_id',
                },
                'location_map': {
                    'traded_at_from': 'query',
                    'traded_at_to': 'query',
                    'cursor': 'query',
                    'market_id': 'query',
                    'page_size': 'query',
                    'trader_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_trade_history_get
        )

        def __v1_exchange_bot_trader_order_cancel_post(
            self,
            cancel_order,
            **kwargs
        ):
            """Cancel order  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_trader_order_cancel_post(cancel_order, async_req=True)
            >>> result = thread.get()

            Args:
                cancel_order (CancelOrder): to cancel an order(s) - send list of cliet_id(s) and the market for which you want to close orders, you can close orders only for one market at a time  to cancel all order(s) by market - send only market_id  to cancel all orders - send empty body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CancelOrder
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['cancel_order'] = \
                cancel_order
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_trader_order_cancel_post = _Endpoint(
            settings={
                'response_type': (CancelOrder,),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/trader/order/cancel/',
                'operation_id': 'v1_exchange_bot_trader_order_cancel_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cancel_order',
                ],
                'required': [
                    'cancel_order',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cancel_order':
                        (CancelOrder,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'cancel_order': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__v1_exchange_bot_trader_order_cancel_post
        )

        def __v1_exchange_bot_trader_order_post(
            self,
            place_order,
            **kwargs
        ):
            """Place an order  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_trader_order_post(place_order, async_req=True)
            >>> result = thread.get()

            Args:
                place_order (PlaceOrder):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PlaceOrder
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['place_order'] = \
                place_order
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_trader_order_post = _Endpoint(
            settings={
                'response_type': (PlaceOrder,),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/trader/order/',
                'operation_id': 'v1_exchange_bot_trader_order_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'place_order',
                ],
                'required': [
                    'place_order',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'place_order':
                        (PlaceOrder,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'place_order': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__v1_exchange_bot_trader_order_post
        )

        def __v1_exchange_bot_trader_order_update_post(
            self,
            update_order,
            **kwargs
        ):
            """Order update  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_trader_order_update_post(update_order, async_req=True)
            >>> result = thread.get()

            Args:
                update_order (UpdateOrder):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UpdateOrder
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['update_order'] = \
                update_order
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_trader_order_update_post = _Endpoint(
            settings={
                'response_type': (UpdateOrder,),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/trader/order/update/',
                'operation_id': 'v1_exchange_bot_trader_order_update_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_order',
                ],
                'required': [
                    'update_order',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_order':
                        (UpdateOrder,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_order': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__v1_exchange_bot_trader_order_update_post
        )
