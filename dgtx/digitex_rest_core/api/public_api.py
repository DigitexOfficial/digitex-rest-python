"""
    Digitex Rest Trading API

    <br> <h4>Digitex's REST trading api specification</h4>  In order to start, one has to register either at https://testnet.digitexfutures.com for testnet (virtual funds trading) or at https://digitex.io - our mainnet (real money trading).  After registration you need to obtain your trading token in your account.  Direct links to the account page: - testnet - https://testnet.digitexfutures.com/profile/account - mainet - https://digitex.io/trade/profile/account  If you have already created your token, you can simply copy it, else click on \"Create\" in the API section of your account.   IMPORTANT NOTES!  - All of the data which is expected to be float or decimal are passed as strings. Data is converted into Decimal/float format on the client level - All timestamps are in microseconds UTC - Enums, such as order types, status etc can be found in Exchange-Meta-Data group of endpoints  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: spavlyuk@digitex.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from dgtx.digitex_rest_core.api_client import ApiClient, Endpoint as _Endpoint
from dgtx.digitex_rest_core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from dgtx.digitex_rest_core.model.bad_request_type import BadRequestType
from dgtx.digitex_rest_core.model.currency import Currency
from dgtx.digitex_rest_core.model.currency_pair import CurrencyPair
from dgtx.digitex_rest_core.model.exchange_info import ExchangeInfo
from dgtx.digitex_rest_core.model.exchange_order_book import ExchangeOrderBook
from dgtx.digitex_rest_core.model.exchange_recent_trade_list import ExchangeRecentTradeList
from dgtx.digitex_rest_core.model.market import Market
from dgtx.digitex_rest_core.model.ohlcv import OHLCV
from dgtx.digitex_rest_core.model.ping import Ping


class PublicApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __v1_exchange_bot_currency_get(
            self,
            **kwargs
        ):
            """Currencies  # noqa: E501

            Returns list of currencies that are available to use in the wallet  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_currency_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                currency_id (int): Optional query parameter to return single currency info, if empty returns list of available currencies. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Currency]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_currency_get = _Endpoint(
            settings={
                'response_type': ([Currency],),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/currency/',
                'operation_id': 'v1_exchange_bot_currency_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'currency_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'currency_id':
                        (int,),
                },
                'attribute_map': {
                    'currency_id': 'currency_id',
                },
                'location_map': {
                    'currency_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_currency_get
        )

        def __v1_exchange_bot_currency_pair_get(
            self,
            **kwargs
        ):
            """Returns available list of currency pairs  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_currency_pair_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [CurrencyPair]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_currency_pair_get = _Endpoint(
            settings={
                'response_type': ([CurrencyPair],),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/currency_pair/',
                'operation_id': 'v1_exchange_bot_currency_pair_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_currency_pair_get
        )

        def __v1_exchange_bot_exchange_info_get(
            self,
            **kwargs
        ):
            """Exchange information  # noqa: E501

            This endpoint returns all metadata for the exchange, such as: - traders ratelimits. сurrently this is not strictly enforced, however rate limits can be applied individually if the trader abuses the API - notifications. This field will contain all notifications/announcements from the exchnage. Please note, these are not system notifications.  - servertime - server's Unix timestamp in microseconds. - currencies - markets - order types enum values (LIMIT/MARKET) - time in force / order duruation enum values (e.g Good till funding, Good till cancelled) - order_sides enum values (But/Sell) - order_positions enum values(Long/Short) - order_status (Pending, Accepted, Filled, etc)   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_exchange_info_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExchangeInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_exchange_info_get = _Endpoint(
            settings={
                'response_type': (ExchangeInfo,),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/exchange_info/',
                'operation_id': 'v1_exchange_bot_exchange_info_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_exchange_info_get
        )

        def __v1_exchange_bot_history_ohlcv_get(
            self,
            market_id,
            resolution,
            **kwargs
        ):
            """OHLCV  # noqa: E501

            Returns open high low close volume aggregated data for selected market and timeframe.  In any case returns max 1k datapoints. Optionally datapoints can be filtered with date_from and date_to parameters  Available timeframes (resolutions): - daily (D or 1D, 2D ... ) - weekly (1W, 2W ...) - monthly (1M, 2M...) - minutes (1, 2 ...).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_history_ohlcv_get(market_id, resolution, async_req=True)
            >>> result = thread.get()

            Args:
                market_id (int): int market_id
                resolution (str): Symbol resolution. Possible resolutions are daily (D or 1D, 2D ... ), weekly (1W, 2W ...), monthly (1M, 2M...) and an intra-day resolution – minutes(1, 2 ...).

            Keyword Args:
                date_from (int): Unix timestamp (UTC) of the leftmost required bar, including from.. [optional]
                date_to (int): Unix timestamp (UTC) of the rightmost required bar, including to. It can be in the future. In this case, the rightmost required bar is the latest available bar.. [optional]
                top_n (int): number of records ohlcv, default 10000. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OHLCV
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['market_id'] = \
                market_id
            kwargs['resolution'] = \
                resolution
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_history_ohlcv_get = _Endpoint(
            settings={
                'response_type': (OHLCV,),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/history/ohlcv/',
                'operation_id': 'v1_exchange_bot_history_ohlcv_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'resolution',
                    'date_from',
                    'date_to',
                    'top_n',
                ],
                'required': [
                    'market_id',
                    'resolution',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'resolution':
                        (str,),
                    'date_from':
                        (int,),
                    'date_to':
                        (int,),
                    'top_n':
                        (int,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                    'resolution': 'resolution',
                    'date_from': 'date_from',
                    'date_to': 'date_to',
                    'top_n': 'top_n',
                },
                'location_map': {
                    'market_id': 'query',
                    'resolution': 'query',
                    'date_from': 'query',
                    'date_to': 'query',
                    'top_n': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_history_ohlcv_get
        )

        def __v1_exchange_bot_markets_get(
            self,
            **kwargs
        ):
            """Markets  # noqa: E501

            Get list of markets  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_markets_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                market_id (int): Optional query to return just one market_id. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Market]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_markets_get = _Endpoint(
            settings={
                'response_type': ([Market],),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/markets/',
                'operation_id': 'v1_exchange_bot_markets_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_markets_get
        )

        def __v1_exchange_bot_order_book_get(
            self,
            market_id,
            **kwargs
        ):
            """Order book  # noqa: E501

            Returns exchange's order book for selected market  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_order_book_get(market_id, async_req=True)
            >>> result = thread.get()

            Args:
                market_id (int): market_id 

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExchangeOrderBook
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['market_id'] = \
                market_id
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_order_book_get = _Endpoint(
            settings={
                'response_type': (ExchangeOrderBook,),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/order_book/',
                'operation_id': 'v1_exchange_bot_order_book_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                ],
                'required': [
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_order_book_get
        )

        def __v1_exchange_bot_ping_get(
            self,
            **kwargs
        ):
            """Ping  # noqa: E501

            Utility endpoint to ping the server, If \"pong\" is in the response, then the service is working properly. Additionally there is a timestamp value of servers's internal time. Note all times are in UTC  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_ping_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Ping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_ping_get = _Endpoint(
            settings={
                'response_type': (Ping,),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/ping',
                'operation_id': 'v1_exchange_bot_ping_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_ping_get
        )

        def __v1_exchange_bot_recent_trades_get(
            self,
            market_id,
            **kwargs
        ):
            """List of recent trades done at the market  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_exchange_bot_recent_trades_get(market_id, async_req=True)
            >>> result = thread.get()

            Args:
                market_id (int): market id

            Keyword Args:
                max_trades (int): Limit maximum number of recent trades. Default limit is 1000. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExchangeRecentTradeList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['market_id'] = \
                market_id
            return self.call_with_http_info(**kwargs)

        self.v1_exchange_bot_recent_trades_get = _Endpoint(
            settings={
                'response_type': (ExchangeRecentTradeList,),
                'auth': [
                    'TradersToken'
                ],
                'endpoint_path': '/v1/exchange/bot/recent_trades/',
                'operation_id': 'v1_exchange_bot_recent_trades_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'max_trades',
                ],
                'required': [
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'max_trades':
                        (int,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                    'max_trades': 'max_trades',
                },
                'location_map': {
                    'market_id': 'query',
                    'max_trades': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_exchange_bot_recent_trades_get
        )
